@page "/"
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Policy = "AuthenticatedUser")]

@inject IServiceProvider _serviceProvider
@* @inject UserManager<Data.ApplicationUser> UserManager *@
@inject AuthenticationStateProvider _authenticationStateProvider;
@inject Code.HashingHandler _hashingHandler;

<PageTitle>Home</PageTitle>

@* @if (_isAuthenticated)
{
    <p>You are logged in!</p>
    @if (_isAdmin)
    {
        <p>You are admin!</p>
    }
}
else
{
    <p>You are Not logged in!</p>
} *@

<h1>Hello, world!</h1>

Welcome to your new app.

<AuthorizeView>
    <Authorized>
        <p>You are logged in!</p>
    </Authorized>
    <NotAuthorized>
        <p>You are not logged in!</p>
    </NotAuthorized>
</AuthorizeView>
<AuthorizeView Roles="Admin">
    <Authorized>
        <p>You are logged in as Admin!</p>
    </Authorized>
</AuthorizeView>

@code{
    private bool _isAuthenticated;
    private bool _isAdmin;

    public bool IsAuth => _isAuthenticated;
    public bool IsAdmin => _isAdmin;

    protected override async Task OnInitializedAsync()
    {
        // await CreateUserRolesAsync("mikkelinis@gmail.com", "Admin");
        var authenticationState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var authUser = authenticationState.User;
        _isAuthenticated = authUser.Identity.IsAuthenticated;
        _isAdmin = authUser.IsInRole("Admin");

        string textToHash1 = "MyTextToHash";
        string textToHash2 = "MyTextToHash";
        string hashedValue1 = _hashingHandler.BCryptHashing(textToHash1);
        bool userIsValidated = _hashingHandler.BCryptVerifyHashing(textToHash1, hashedValue1);
        // bool userIsValidated = hashedValue1 == hashedValue2;
    }

    // public async Task CreateUserRolesAsync(string user, string role)
    // {
    //     var roleManager = _serviceProvider.GetRequiredService<RoleManager<IdentityRole>>();
    //     var userManager = UserManager;

    //     var userRoleCheck = await roleManager.RoleExistsAsync(role);

    //     if (!userRoleCheck)
    //         await roleManager.CreateAsync(new IdentityRole(role));

    //     Data.ApplicationUser identityUser = await userManager.FindByEmailAsync(user);
    //     await userManager.AddToRoleAsync(identityUser, role);
    // }
}